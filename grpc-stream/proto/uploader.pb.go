// Code generated by protoc-gen-go. DO NOT EDIT.
// source: uploader.proto

package uploader

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FileTransferRequest struct {
	Header               *FileHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data                 []byte      `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *FileTransferRequest) Reset()         { *m = FileTransferRequest{} }
func (m *FileTransferRequest) String() string { return proto.CompactTextString(m) }
func (*FileTransferRequest) ProtoMessage()    {}
func (*FileTransferRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b055a52f625709c9, []int{0}
}

func (m *FileTransferRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileTransferRequest.Unmarshal(m, b)
}
func (m *FileTransferRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileTransferRequest.Marshal(b, m, deterministic)
}
func (m *FileTransferRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileTransferRequest.Merge(m, src)
}
func (m *FileTransferRequest) XXX_Size() int {
	return xxx_messageInfo_FileTransferRequest.Size(m)
}
func (m *FileTransferRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FileTransferRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FileTransferRequest proto.InternalMessageInfo

func (m *FileTransferRequest) GetHeader() *FileHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *FileTransferRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type FileStreamRequest struct {
	// Types that are valid to be assigned to Contents:
	//	*FileStreamRequest_Header
	//	*FileStreamRequest_Chunk
	Contents             isFileStreamRequest_Contents `protobuf_oneof:"contents"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *FileStreamRequest) Reset()         { *m = FileStreamRequest{} }
func (m *FileStreamRequest) String() string { return proto.CompactTextString(m) }
func (*FileStreamRequest) ProtoMessage()    {}
func (*FileStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b055a52f625709c9, []int{1}
}

func (m *FileStreamRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileStreamRequest.Unmarshal(m, b)
}
func (m *FileStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileStreamRequest.Marshal(b, m, deterministic)
}
func (m *FileStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileStreamRequest.Merge(m, src)
}
func (m *FileStreamRequest) XXX_Size() int {
	return xxx_messageInfo_FileStreamRequest.Size(m)
}
func (m *FileStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FileStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FileStreamRequest proto.InternalMessageInfo

type isFileStreamRequest_Contents interface {
	isFileStreamRequest_Contents()
}

type FileStreamRequest_Header struct {
	Header *FileHeader `protobuf:"bytes,1,opt,name=header,proto3,oneof"`
}

type FileStreamRequest_Chunk struct {
	Chunk []byte `protobuf:"bytes,2,opt,name=chunk,proto3,oneof"`
}

func (*FileStreamRequest_Header) isFileStreamRequest_Contents() {}

func (*FileStreamRequest_Chunk) isFileStreamRequest_Contents() {}

func (m *FileStreamRequest) GetContents() isFileStreamRequest_Contents {
	if m != nil {
		return m.Contents
	}
	return nil
}

func (m *FileStreamRequest) GetHeader() *FileHeader {
	if x, ok := m.GetContents().(*FileStreamRequest_Header); ok {
		return x.Header
	}
	return nil
}

func (m *FileStreamRequest) GetChunk() []byte {
	if x, ok := m.GetContents().(*FileStreamRequest_Chunk); ok {
		return x.Chunk
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*FileStreamRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*FileStreamRequest_Header)(nil),
		(*FileStreamRequest_Chunk)(nil),
	}
}

type FileHeader struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are valid to be assigned to OptionalFileSize:
	//	*FileHeader_FileSize
	OptionalFileSize     isFileHeader_OptionalFileSize `protobuf_oneof:"optional_file_size"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *FileHeader) Reset()         { *m = FileHeader{} }
func (m *FileHeader) String() string { return proto.CompactTextString(m) }
func (*FileHeader) ProtoMessage()    {}
func (*FileHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_b055a52f625709c9, []int{2}
}

func (m *FileHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileHeader.Unmarshal(m, b)
}
func (m *FileHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileHeader.Marshal(b, m, deterministic)
}
func (m *FileHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileHeader.Merge(m, src)
}
func (m *FileHeader) XXX_Size() int {
	return xxx_messageInfo_FileHeader.Size(m)
}
func (m *FileHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_FileHeader.DiscardUnknown(m)
}

var xxx_messageInfo_FileHeader proto.InternalMessageInfo

func (m *FileHeader) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type isFileHeader_OptionalFileSize interface {
	isFileHeader_OptionalFileSize()
}

type FileHeader_FileSize struct {
	FileSize int64 `protobuf:"varint,2,opt,name=file_size,json=fileSize,proto3,oneof"`
}

func (*FileHeader_FileSize) isFileHeader_OptionalFileSize() {}

func (m *FileHeader) GetOptionalFileSize() isFileHeader_OptionalFileSize {
	if m != nil {
		return m.OptionalFileSize
	}
	return nil
}

func (m *FileHeader) GetFileSize() int64 {
	if x, ok := m.GetOptionalFileSize().(*FileHeader_FileSize); ok {
		return x.FileSize
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*FileHeader) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*FileHeader_FileSize)(nil),
	}
}

type FileRequest struct {
	FileUrl              string   `protobuf:"bytes,1,opt,name=file_url,json=fileUrl,proto3" json:"file_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileRequest) Reset()         { *m = FileRequest{} }
func (m *FileRequest) String() string { return proto.CompactTextString(m) }
func (*FileRequest) ProtoMessage()    {}
func (*FileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b055a52f625709c9, []int{3}
}

func (m *FileRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileRequest.Unmarshal(m, b)
}
func (m *FileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileRequest.Marshal(b, m, deterministic)
}
func (m *FileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileRequest.Merge(m, src)
}
func (m *FileRequest) XXX_Size() int {
	return xxx_messageInfo_FileRequest.Size(m)
}
func (m *FileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FileRequest proto.InternalMessageInfo

func (m *FileRequest) GetFileUrl() string {
	if m != nil {
		return m.FileUrl
	}
	return ""
}

type FileChunk struct {
	ChunkData            []byte   `protobuf:"bytes,1,opt,name=chunk_data,json=chunkData,proto3" json:"chunk_data,omitempty"`
	ChunkNumber          int32    `protobuf:"varint,2,opt,name=chunk_number,json=chunkNumber,proto3" json:"chunk_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileChunk) Reset()         { *m = FileChunk{} }
func (m *FileChunk) String() string { return proto.CompactTextString(m) }
func (*FileChunk) ProtoMessage()    {}
func (*FileChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_b055a52f625709c9, []int{4}
}

func (m *FileChunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileChunk.Unmarshal(m, b)
}
func (m *FileChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileChunk.Marshal(b, m, deterministic)
}
func (m *FileChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileChunk.Merge(m, src)
}
func (m *FileChunk) XXX_Size() int {
	return xxx_messageInfo_FileChunk.Size(m)
}
func (m *FileChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_FileChunk.DiscardUnknown(m)
}

var xxx_messageInfo_FileChunk proto.InternalMessageInfo

func (m *FileChunk) GetChunkData() []byte {
	if m != nil {
		return m.ChunkData
	}
	return nil
}

func (m *FileChunk) GetChunkNumber() int32 {
	if m != nil {
		return m.ChunkNumber
	}
	return 0
}

type FileData struct {
	ChunkData            []byte   `protobuf:"bytes,1,opt,name=chunk_data,json=chunkData,proto3" json:"chunk_data,omitempty"`
	ChunkNumber          int32    `protobuf:"varint,2,opt,name=chunk_number,json=chunkNumber,proto3" json:"chunk_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileData) Reset()         { *m = FileData{} }
func (m *FileData) String() string { return proto.CompactTextString(m) }
func (*FileData) ProtoMessage()    {}
func (*FileData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b055a52f625709c9, []int{5}
}

func (m *FileData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileData.Unmarshal(m, b)
}
func (m *FileData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileData.Marshal(b, m, deterministic)
}
func (m *FileData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileData.Merge(m, src)
}
func (m *FileData) XXX_Size() int {
	return xxx_messageInfo_FileData.Size(m)
}
func (m *FileData) XXX_DiscardUnknown() {
	xxx_messageInfo_FileData.DiscardUnknown(m)
}

var xxx_messageInfo_FileData proto.InternalMessageInfo

func (m *FileData) GetChunkData() []byte {
	if m != nil {
		return m.ChunkData
	}
	return nil
}

func (m *FileData) GetChunkNumber() int32 {
	if m != nil {
		return m.ChunkNumber
	}
	return 0
}

func init() {
	proto.RegisterType((*FileTransferRequest)(nil), "uploader.FileTransferRequest")
	proto.RegisterType((*FileStreamRequest)(nil), "uploader.FileStreamRequest")
	proto.RegisterType((*FileHeader)(nil), "uploader.FileHeader")
	proto.RegisterType((*FileRequest)(nil), "uploader.FileRequest")
	proto.RegisterType((*FileChunk)(nil), "uploader.FileChunk")
	proto.RegisterType((*FileData)(nil), "uploader.FileData")
}

func init() { proto.RegisterFile("uploader.proto", fileDescriptor_b055a52f625709c9) }

var fileDescriptor_b055a52f625709c9 = []byte{
	// 403 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x92, 0x41, 0xef, 0xd2, 0x30,
	0x18, 0xc6, 0x37, 0xf4, 0x8f, 0xdb, 0x0b, 0x21, 0xb1, 0x20, 0x41, 0x08, 0x09, 0xf6, 0xb4, 0x83,
	0x19, 0x06, 0x0f, 0x5e, 0x15, 0x51, 0x77, 0x50, 0x0f, 0x43, 0x62, 0xe2, 0x65, 0x29, 0x50, 0x60,
	0x71, 0x6b, 0x67, 0xd7, 0xc5, 0xc8, 0xb7, 0xf0, 0x1b, 0x9b, 0xbe, 0x65, 0xe8, 0x4c, 0x48, 0x4c,
	0xbc, 0xb5, 0x4f, 0x9f, 0xf7, 0x97, 0x27, 0x4f, 0x5f, 0xe8, 0x55, 0x45, 0x26, 0xd9, 0x9e, 0xab,
	0xb0, 0x50, 0x52, 0x4b, 0xe2, 0xd5, 0xf7, 0xf1, 0xe4, 0x28, 0xe5, 0x31, 0xe3, 0x73, 0xd4, 0xb7,
	0xd5, 0x61, 0xce, 0xf3, 0x42, 0xff, 0xb0, 0x36, 0xfa, 0x19, 0xfa, 0x6f, 0xd3, 0x8c, 0x7f, 0x52,
	0x4c, 0x94, 0x07, 0xae, 0x62, 0xfe, 0xad, 0xe2, 0xa5, 0x26, 0x4f, 0xa1, 0x7d, 0xe2, 0x66, 0x7a,
	0xe4, 0xce, 0xdc, 0xa0, 0xb3, 0x18, 0x84, 0x57, 0xbc, 0xb1, 0x47, 0xf8, 0x16, 0x5f, 0x3c, 0x84,
	0xc0, 0xfd, 0x3d, 0xd3, 0x6c, 0xd4, 0x9a, 0xb9, 0x41, 0x37, 0xc6, 0x33, 0x3d, 0xc2, 0x43, 0xe3,
	0x5c, 0x6b, 0xc5, 0x59, 0x5e, 0x63, 0xc3, 0x7f, 0xc1, 0x46, 0xce, 0x15, 0x3c, 0x84, 0xbb, 0xdd,
	0xa9, 0x12, 0x5f, 0x2d, 0x39, 0x72, 0x62, 0x7b, 0x5d, 0x02, 0x78, 0x3b, 0x29, 0x34, 0x17, 0xba,
	0xa4, 0x1b, 0x80, 0xdf, 0xb3, 0x26, 0x8a, 0x60, 0x39, 0x47, 0xbe, 0x1f, 0xe3, 0x99, 0x4c, 0xc1,
	0x3f, 0xa4, 0x19, 0x4f, 0xca, 0xf4, 0xcc, 0x91, 0x74, 0x2f, 0x72, 0x62, 0xcf, 0x48, 0xeb, 0xf4,
	0xcc, 0x97, 0x03, 0x20, 0xb2, 0xd0, 0xa9, 0x14, 0x2c, 0x4b, 0xae, 0x3e, 0x1a, 0x40, 0xc7, 0x60,
	0xeb, 0xe4, 0x8f, 0x01, 0x07, 0x92, 0x4a, 0x65, 0x17, 0xf6, 0x03, 0x73, 0xdf, 0xa8, 0x8c, 0x7e,
	0x00, 0xdf, 0x38, 0x5f, 0x9b, 0x64, 0x64, 0x0a, 0x80, 0x11, 0x13, 0x2c, 0xc4, 0xc5, 0x42, 0x7c,
	0x54, 0x56, 0x4c, 0x33, 0xf2, 0x04, 0xba, 0xf6, 0x59, 0x54, 0xf9, 0x96, 0x2b, 0x4c, 0x73, 0x17,
	0x77, 0x50, 0xfb, 0x88, 0x12, 0x7d, 0x0f, 0x9e, 0xc1, 0xa1, 0xfd, 0xbf, 0x69, 0x8b, 0x9f, 0x2d,
	0xf0, 0x36, 0x97, 0x8e, 0xc9, 0x2b, 0x68, 0xdb, 0x33, 0x99, 0x36, 0x8b, 0xff, 0xeb, 0xfb, 0xc7,
	0xc3, 0xd0, 0xee, 0x4c, 0x58, 0xef, 0x4c, 0xf8, 0xc6, 0xec, 0x0c, 0x75, 0xc8, 0x3b, 0xe8, 0x5a,
	0x84, 0xfd, 0x58, 0x32, 0x69, 0x82, 0x1a, 0xdf, 0x7d, 0x1b, 0x13, 0xb8, 0xe4, 0x25, 0xf4, 0x56,
	0xf2, 0xbb, 0xf8, 0x03, 0xf5, 0xa8, 0x89, 0xaa, 0x21, 0xfd, 0xa6, 0x8c, 0x35, 0x53, 0xe7, 0x99,
	0x4b, 0x5e, 0x80, 0x57, 0x13, 0x6e, 0xcd, 0x92, 0xa6, 0x6c, 0x4a, 0xa3, 0xce, 0xb2, 0xf5, 0xc5,
	0xd9, 0xb6, 0x31, 0xd2, 0xf3, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x0e, 0xf5, 0x97, 0x1d, 0x37,
	0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UploaderClient is the client API for Uploader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UploaderClient interface {
	Upload(ctx context.Context, in *FileTransferRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UploadStream(ctx context.Context, opts ...grpc.CallOption) (Uploader_UploadStreamClient, error)
	DownloadStream(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (Uploader_DownloadStreamClient, error)
	Download(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileData, error)
}

type uploaderClient struct {
	cc *grpc.ClientConn
}

func NewUploaderClient(cc *grpc.ClientConn) UploaderClient {
	return &uploaderClient{cc}
}

func (c *uploaderClient) Upload(ctx context.Context, in *FileTransferRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/uploader.Uploader/Upload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploaderClient) UploadStream(ctx context.Context, opts ...grpc.CallOption) (Uploader_UploadStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Uploader_serviceDesc.Streams[0], "/uploader.Uploader/UploadStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &uploaderUploadStreamClient{stream}
	return x, nil
}

type Uploader_UploadStreamClient interface {
	Send(*FileStreamRequest) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type uploaderUploadStreamClient struct {
	grpc.ClientStream
}

func (x *uploaderUploadStreamClient) Send(m *FileStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *uploaderUploadStreamClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *uploaderClient) DownloadStream(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (Uploader_DownloadStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Uploader_serviceDesc.Streams[1], "/uploader.Uploader/DownloadStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &uploaderDownloadStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Uploader_DownloadStreamClient interface {
	Recv() (*FileChunk, error)
	grpc.ClientStream
}

type uploaderDownloadStreamClient struct {
	grpc.ClientStream
}

func (x *uploaderDownloadStreamClient) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *uploaderClient) Download(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileData, error) {
	out := new(FileData)
	err := c.cc.Invoke(ctx, "/uploader.Uploader/Download", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UploaderServer is the server API for Uploader service.
type UploaderServer interface {
	Upload(context.Context, *FileTransferRequest) (*empty.Empty, error)
	UploadStream(Uploader_UploadStreamServer) error
	DownloadStream(*FileRequest, Uploader_DownloadStreamServer) error
	Download(context.Context, *FileRequest) (*FileData, error)
}

func RegisterUploaderServer(s *grpc.Server, srv UploaderServer) {
	s.RegisterService(&_Uploader_serviceDesc, srv)
}

func _Uploader_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploaderServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uploader.Uploader/Upload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploaderServer).Upload(ctx, req.(*FileTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uploader_UploadStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UploaderServer).UploadStream(&uploaderUploadStreamServer{stream})
}

type Uploader_UploadStreamServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*FileStreamRequest, error)
	grpc.ServerStream
}

type uploaderUploadStreamServer struct {
	grpc.ServerStream
}

func (x *uploaderUploadStreamServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *uploaderUploadStreamServer) Recv() (*FileStreamRequest, error) {
	m := new(FileStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Uploader_DownloadStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UploaderServer).DownloadStream(m, &uploaderDownloadStreamServer{stream})
}

type Uploader_DownloadStreamServer interface {
	Send(*FileChunk) error
	grpc.ServerStream
}

type uploaderDownloadStreamServer struct {
	grpc.ServerStream
}

func (x *uploaderDownloadStreamServer) Send(m *FileChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _Uploader_Download_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploaderServer).Download(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uploader.Uploader/Download",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploaderServer).Download(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Uploader_serviceDesc = grpc.ServiceDesc{
	ServiceName: "uploader.Uploader",
	HandlerType: (*UploaderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Upload",
			Handler:    _Uploader_Upload_Handler,
		},
		{
			MethodName: "Download",
			Handler:    _Uploader_Download_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadStream",
			Handler:       _Uploader_UploadStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadStream",
			Handler:       _Uploader_DownloadStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "uploader.proto",
}
